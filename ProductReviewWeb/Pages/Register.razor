@page "/register"
@using ProductReviewWeb.Services
@inject NavigationManager Navigation
@inject HttpClient Http

<PageTitle>Register</PageTitle>

<h3>Register</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

@if (isVerificationStep)
{
    <div>
        <p>A verification code has been sent to your email. Please enter the code below:</p>
        <EditForm Model="verificationModel" OnValidSubmit="HandleVerification">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div>
                <label for="code">Verification Code:</label>
                <InputText id="code" @bind-Value="verificationModel.Code" />
            </div>
            <button type="submit">Verify</button>
        </EditForm>
    </div>
}
else
{
    <EditForm Model="registerModel" OnValidSubmit="HandleRegister">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div>
            <label for="email">Email:</label>
            <InputText id="email" @bind-Value="registerModel.Email" />
        </div>
        <div>
            <label for="password">Password:</label>
            <InputText id="password" @bind-Value="registerModel.PasswordHash" type="password" />
        </div>
        <button type="submit">Register</button>
    </EditForm>
}

<p>
    If you already have an account, <a href="/login">login here</a>.
</p>

@code {
    private RegisterModel registerModel = new RegisterModel();
    private VerificationModel verificationModel = new VerificationModel();
    private string errorMessage;
    private bool isVerificationStep = false;

    private async Task HandleRegister()
    {
        if (!IsValidEmail(registerModel.Email))
        {
            errorMessage = "Invalid email format.";
            return;
        }

        if (string.IsNullOrWhiteSpace(registerModel.PasswordHash))
        {
            errorMessage = "Password cannot be empty.";
            return;
        }

        if (!IsValidPassword(registerModel.PasswordHash))
        {
            errorMessage = "Password must be at least 8 characters long and contain no spaces.";
            return;
        }

        var user = new User
            {
                Email = registerModel.Email,
                PasswordHash = registerModel.PasswordHash
            };

        var response = await Http.PostAsJsonAsync("https://portfolioalfredog.somee.com/api/users/register", user);

        if (response.IsSuccessStatusCode)
        {
            isVerificationStep = true;
            errorMessage = string.Empty; // Clear any previous error messages
        }
        else
        {
            errorMessage = "Registration failed. Please try again.";
        }
    }

    private async Task HandleVerification()
    {
        var emailVerification = new EmailVerification
            {
                Email = registerModel.Email,
                Code = verificationModel.Code
            };

        var verificationData = new UserEmailVerificationModel
            {
                User = new User { Email = registerModel.Email, PasswordHash = registerModel.PasswordHash },
                EmailVerification = emailVerification
            };

        var response = await Http.PostAsJsonAsync("https://portfolioalfredog.somee.com/api/users/emailVerification", verificationData);

        if (response.IsSuccessStatusCode)
        {
            // Redirect to the login page upon successful verification
            Navigation.NavigateTo("/login");
        }
        else
        {
            errorMessage = "Verification failed. Please try again.";
        }
    }

    private bool IsValidEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }

    private bool IsValidPassword(string password)
    {
        return password.Length >= 8 && !password.Any(char.IsWhiteSpace);
    }

    private class RegisterModel
    {
        public string Email { get; set; }
        public string PasswordHash { get; set; }
    }

    private class VerificationModel
    {
        public string Code { get; set; } // Changed to string to match input binding
    }

    private class UserEmailVerificationModel
    {
        public User User { get; set; }
        public EmailVerification EmailVerification { get; set; }
    }

    private class User
    {
        public string Email { get; set; }
        public string PasswordHash { get; set; }
        public string Role { get; set; } = "User";
    }

    private class EmailVerification
    {
        public string Email { get; set; }
        public string Code { get; set; }
    }
}
