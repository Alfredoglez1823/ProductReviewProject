@page "/admin-page"
@using ProductReviewWeb.Services
@using ProductReviewWeb.Models
@using System.Net.Http.Headers
@inject NavigationManager Navigation
@inject IHttpClientFactory HttpClientFactory
@inject ISecureStorage SecureStorageService

<h3>Add product comment</h3>

<button class="btn btn-primary mb-3" @onclick="NavigateToHome">Home</button>

<div class="container">
    <EditForm Model="newProductComment" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="productSelect" class="form-label">Product</label>
            <InputSelect id="productSelect" class="form-select" @bind-Value="newProductComment.Product">
                <option value="">Select a product</option>
                <option value="Phone">Phone</option>
                <option value="Console">Console</option>
                <option value="Laptop">Laptop</option>
                <option value="Headphones">Headphones</option>
                <option value="Printer">Printer</option>
                <option value="Television">Television</option>
                <option value="Router">Router</option>
                <option value="Vacuum Cleaner">Vacuum Cleaner</option>
            </InputSelect>
        </div>

        <div class="mb-3">
            <label for="comment" class="form-label">Comment</label>
            <InputTextArea id="comment" class="form-control" @bind-Value="newProductComment.Comment"></InputTextArea>
        </div>

        <button type="submit" class="btn btn-primary">Add comment2</button>
    </EditForm>
</div>

<h3>Delete Product Comment</h3>

<div class="container">
    <div class="mb-3">
        <label for="productId" class="form-label">Product ID</label>
        <InputNumber id="productId" class="form-control" @bind-Value="productIdToDelete"></InputNumber>
    </div>

    <button class="btn btn-danger" @onclick="HandleDelete">Delete Comment</button>
</div>

<div>
    @if (!string.IsNullOrEmpty(deleteErrorMessage))
    {
        <div class="alert alert-danger mt-3">@deleteErrorMessage</div>
    }
</div>

@code {
    private ProductComment newProductComment = new ProductComment();
    private string accessToken;
    private string userRole;
    private int? productIdToDelete;
    private string deleteErrorMessage;
    private int numberAttempts = 0;

    protected override async Task OnInitializedAsync()
    {
        accessToken = await SecureStorageService.GetItemAsync("accessToken");
        userRole = await SecureStorageService.GetItemAsync("userRole");

        if (string.IsNullOrEmpty(accessToken))
        {
            Navigation.NavigateTo("/login");
        }
        else if (userRole != "Admin")
        {
            Navigation.NavigateTo("/");
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var client = HttpClientFactory.CreateClient();
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);

            var response = await client.PostAsJsonAsync("https://portfolioalfredog.somee.com/api/ProductComments", newProductComment);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Producto creado: {result}");
                Navigation.NavigateTo("/");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error al crear el producto: {error}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al crear el producto: {ex.Message}");
        }
    }

    private async Task HandleDelete()
    {
        if(numberAttempts == 1)
        {
            
            var client = HttpClientFactory.CreateClient();
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);
            var response = await client.GetAsync("https://portfolioalfredog.somee.com/api/ProductComments/ip");
            if (response.IsSuccessStatusCode)
            {
                numberAttempts++;
                var ipInfo = await response.Content.ReadFromJsonAsync<IpInfo>();
                deleteErrorMessage = $"I said no. now you will be hacked. Your IP is: {ipInfo.Ip}";
                return;
            }
            else
            {
                numberAttempts++;
                deleteErrorMessage = "I said no. now you will be hacked. Your IP is: 192.168.0.1";
                return;
            }

            return;
        }

        if (productIdToDelete == 1 && numberAttempts != 1)
        {
            numberAttempts++;
            deleteErrorMessage = "You are not allowed to delete the product with ID 1.";
            return;
        }
        else if(productIdToDelete == null)
        {
            deleteErrorMessage = "write an id";
            return;
        }

        try
        {
            var client = HttpClientFactory.CreateClient();
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);

            var response = await client.DeleteAsync($"https://portfolioalfredog.somee.com/api/ProductComments/{productIdToDelete}");

            if (response.IsSuccessStatusCode)
            {
                deleteErrorMessage = $"Product with ID {productIdToDelete} removed.";
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                deleteErrorMessage = "Product not found.";
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                deleteErrorMessage = $"Error deleting product: {error}";
            }
        }
        catch (Exception ex)
        {
            deleteErrorMessage = $"Error deleting product: {ex.Message}";
        }
    }

    private void NavigateToHome()
    {
        Navigation.NavigateTo("/");
    }

    public class IpInfo
    {
        public string Ip { get; set; }
    }
}
